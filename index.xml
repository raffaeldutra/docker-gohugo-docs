<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Documentação Docker</title>
    <link>localhost:1313/</link>
    <description>Recent content on Documentação Docker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-BR</language>
    
	<atom:link href="localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Básico</title>
      <link>localhost:1313/basics/b%C3%A1sico/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>localhost:1313/basics/b%C3%A1sico/</guid>
      <description>Verifique se está com docker corretamente funcionando, para isso execute o comando:
docker version  Sua saída deve ser algo parecido com:
rafael @ nazgul ~ └─ $ ▶ docker version Client: Version:	17.12.0-ce API version:	1.35 Go version:	go1.9.2 Git commit:	c97c6d6 Built:	Wed Dec 27 20:03:51 2017 OS/Arch:	darwin/amd64 Server: Engine: Version:	17.12.0-ce API version:	1.35 (minimum version 1.12) Go version:	go1.9.2 Git commit:	c97c6d6 Built:	Wed Dec 27 20:12:29 2017 OS/Arch:	linux/amd64 Experimental:	true  Comandos Para verificar todos os comandos proporcionados por Docker, simplesmente digite:</description>
    </item>
    
    <item>
      <title>Dockerfile</title>
      <link>localhost:1313/basics/dockerfile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>localhost:1313/basics/dockerfile/</guid>
      <description>Chegamos então ao arquivo principal de Docker, o tão conhecido Dockerfile. Dockerfile é um simples arquivo texto que contem todos os comandos para gerar uma imagem, apenas isso em sua forma mais resumida.
Se você já conhece um pouco de CLI (Command Line Interface) de GNU/Linux, provavelmente não terá nenhum problema para utilizar Dockerfile, pois ele é basicamente comando que você já usa.
Aqui está a lista dos comandos que você pode utilizar dentro do seu arquivo.</description>
    </item>
    
    <item>
      <title>Criando sua imagem usando Dockerfile</title>
      <link>localhost:1313/basics/build/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>localhost:1313/basics/build/</guid>
      <description>Para criamos nossa imagem, precisamos de um arquivo Dockerfile conforme visto aqui. Com este arquivo podemos criar nossas próprias imagens de uma forma organizada e automatizada.
Para criarmos ela, devemos executar o comando
docker build --tag nomeDaImagemQueDeseja:versao.1 .  Devemos atentar par duas coisas aqui:
1 - O arquivo Dockerfile deve estar (mas podemos passar parâmetro, mas não vamos discutir isso agora) no mesmo diretório onde você está executando o comando.</description>
    </item>
    
    <item>
      <title>Interagindo com containers</title>
      <link>localhost:1313/basics/interacting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>localhost:1313/basics/interacting/</guid>
      <description>Até agora fizemos alguns poucos exemplos, vamos entrar de fato em um container e trabalhar um pouco com ele.
Execute o seguinte comando:
docker run --interactive --tty --publish 45000:80 nginx /bin/bash   Edite o arquivo /usr/share/nginx/html/index.html com o vim  O que aconteceu?
apt-get update &amp;amp;&amp;amp; apt-get install vim --yes  Vamos acessar novamente o nosso web server na porta 45000 e percebemos que? Pois então, ao entrarmos dentro de um container, nós &amp;ldquo;perdemos&amp;rdquo; a execução de comando/entrypoint que a imagem foi destinada e para entedemos melhor, vamos ver como esta imagem do nginx foi criada.</description>
    </item>
    
    <item>
      <title>Volumes</title>
      <link>localhost:1313/basics/volumes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>localhost:1313/basics/volumes/</guid>
      <description>Storage drivers Antes de iniciarmos com volumes, é realmente importante entedermos um pouco como funcionam as imagens, pois como foi dito em algum momento, um container só existe se houver uma imagem (em uma forma resumida).
Storage driver permitem que você crie dados em uma camada de escrita/gravação do seu container. O importante aqui neste momento é: quando contianer parar, nenhum dado será persistifo &amp;ndash; leia-se gravado em disco.</description>
    </item>
    
    <item>
      <title>Docker Compose</title>
      <link>localhost:1313/basics/docker-compose/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>localhost:1313/basics/docker-compose/</guid>
      <description>Docker Compose é a maneira de declararmos vários containers para nossa aplicação e ele é &amp;ldquo;invocado&amp;rdquo; pelo comando docker-compose. Então com isso imaginamos que temos uma aplicação escrita em PHP que utiliza banco de dados MySQL para guardarmos nossos dados.
Exemplos:
 temos uma aplicação escrita em PHP temos um banco de dados em MySQL  ou ainda, o tão famoso Wordpress:
 temos o Wordpress temos o banco de dados do Wordpress  Não importa aqui o exemplo, o que importa é a ideia de termos &amp;ldquo;coisas separadas, vamos simplificar a ideia nisso apenas.</description>
    </item>
    
    <item>
      <title>A maneira Linux simples de ser</title>
      <link>localhost:1313/basics/installing/way1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>localhost:1313/basics/installing/way1/</guid>
      <description>Dependendo da versão do seu Ubuntu, Debian e etc, pode Baixe Docker com o comando mágico (funciona somente em Sistemas Operacionais). Windows, sorry :-)
 curl -fsSL https://get.docker.com/ | sh sudo usermod -aG docker &amp;lt;usuario&amp;gt;  Depois disso, você precisa fazer logoff para funcionar com este usuário.</description>
    </item>
    
    <item>
      <title>Forma tradicional</title>
      <link>localhost:1313/basics/installing/way2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>localhost:1313/basics/installing/way2/</guid>
      <description>Remova a versão antiga (caso tiver).
sudo apt-get remove docker docker-engine docker.io  Instale os pacotes que permitem que o apt possa utilizar repositórios com https
sudo apt-get install \ apt-transport-https \ ca-certificates \ curl \ software-properties-common  Agora instale a chave GPG do Docker
 Preste atenção na sua distribuição abaixo
 curl -fsSL https://download.docker.com/linux/$(lsb_release -is | tr &#39;[:upper:]&#39; &#39;[:lower:]&#39;)/gpg | sudo apt-key add -  Adicione o repositório.</description>
    </item>
    
    <item>
      <title>Referências</title>
      <link>localhost:1313/basics/reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>localhost:1313/basics/reference/</guid>
      <description> Referências  Docker site oficial Docker imagens e camadas  </description>
    </item>
    
    <item>
      <title>Docker Compose</title>
      <link>localhost:1313/files/wordpress/docker-compose.yml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>localhost:1313/files/wordpress/docker-compose.yml/</guid>
      <description>version: &#39;3.3&#39; services: db: image: mysql:5.7 volumes: - db_data:/var/lib/mysql restart: always environment: MYSQL_ROOT_PASSWORD: somewordpress MYSQL_DATABASE: wordpress MYSQL_USER: wordpress MYSQL_PASSWORD: wordpress wordpress: depends_on: - db image: wordpress:latest ports: - &amp;quot;8000:80&amp;quot; restart: always environment: WORDPRESS_DB_HOST: db:3306 WORDPRESS_DB_USER: wordpress WORDPRESS_DB_PASSWORD: wordpress volumes: db_data:  </description>
    </item>
    
    <item>
      <title>Nginx Dockerfile</title>
      <link>localhost:1313/files/nginx/dockerfile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>localhost:1313/files/nginx/dockerfile/</guid>
      <description>FROM nginx:latest LABEL description=&amp;quot;Docker imagem que será gerada no nosso exmeplo.&amp;quot; LABEL maintainer=&amp;quot;Rafael Dutra &amp;lt;raffaeldutra@gmail.com&amp;gt;&amp;quot; ENV FOSSDAY Lajeado ENV QUANDO 5/5 2018 RUN apt-get update &amp;amp;&amp;amp; \ apt-get install git --yes ADD index.html /usr/share/nginx/html/index.html EXPOSE 80 CMD [&amp;quot;nginx&amp;quot;, &amp;quot;-g&amp;quot;, &amp;quot;daemon off;&amp;quot;]  </description>
    </item>
    
    <item>
      <title>PHP CLI Dockerfile</title>
      <link>localhost:1313/files/php/dockerfile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>localhost:1313/files/php/dockerfile/</guid>
      <description>FROM php:7.2.5-cli-alpine3.7 CMD [&amp;quot;php&amp;quot;, &amp;quot;--version&amp;quot;]  </description>
    </item>
    
  </channel>
</rss>