<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Documentação Docker</title>
    <link>https://docker.rafaeldutra.me/</link>
    <description>Recent content on Documentação Docker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-BR</language>
    
	<atom:link href="https://docker.rafaeldutra.me/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A maneira Linux simples de ser</title>
      <link>https://docker.rafaeldutra.me/beginner/installing/way1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docker.rafaeldutra.me/beginner/installing/way1/</guid>
      <description>Dependendo da versão do seu Ubuntu, Debian e etc, pode Baixe Docker com o comando mágico (funciona somente em Sistemas Operacionais). Windows, sorry :-)
 curl -fsSL https://get.docker.com/ | sh sudo usermod -aG docker &amp;lt;usuario&amp;gt;  Depois disso, você precisa fazer logoff para funcionar com este usuário.</description>
    </item>
    
    <item>
      <title>Comandos</title>
      <link>https://docker.rafaeldutra.me/beginner/commands/commands/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docker.rafaeldutra.me/beginner/commands/commands/</guid>
      <description>Para verificar todos os comandos proporcionados por Docker, simplesmente digite:
docker  Importante: não esqueça que a linha de comando (CLI) é sua melhor amiga, caso não souber como um comando continua, ou seja, opções deste comando, simplesmente digite:
docker &amp;lt;comando&amp;gt; --help  </description>
    </item>
    
    <item>
      <title>Dockerfile</title>
      <link>https://docker.rafaeldutra.me/beginner/dockerfile/dockerfile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docker.rafaeldutra.me/beginner/dockerfile/dockerfile/</guid>
      <description>Aqui um exemplo utilizando como base a imagem Nginx que já estavámos utilizando anteriormente com o máximo de comandos que o Dockerfile suporta e que vimos acima.
FROM nginx:latest LABEL description=&amp;quot;Docker imagem que será gerada no nosso exmeplo.&amp;quot; LABEL maintainer=&amp;quot;Rafael Dutra &amp;lt;raffaeldutra@gmail.com&amp;gt;&amp;quot; ENV FOSSDAY Lajeado ENV QUANDO 5/5 2018 RUN apt-get update &amp;amp;&amp;amp; \ apt-get install git --yes ADD index.html /usr/share/nginx/html/index.html EXPOSE 80 CMD [&amp;quot;nginx&amp;quot;, &amp;quot;-g&amp;quot;, &amp;quot;daemon off;&amp;quot;]  </description>
    </item>
    
    <item>
      <title>Criando nossa imagem utilizando o Dockerfile</title>
      <link>https://docker.rafaeldutra.me/beginner/dockerfile/creating-image/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docker.rafaeldutra.me/beginner/dockerfile/creating-image/</guid>
      <description>É realmente simples gerarmos uma imagem com o nosso arquivo, segue um exemplo de como isto pode ser feito.
docker build --tag fossday/nginx:0.1 .  Agora vamos executar o nosso container baseado na imagem que acabamos de gerar.
docker run --interactive --tty --publish 46000:80 fossday/nginx:0.1 /bin/bash  Vamos acessa a url e ver o que nos espera, http://localhost:46000
 O que aconteceu? Qual o motivo de alterarmos o arquivo index.html em nossa máquina e nada aconteceu na página?</description>
    </item>
    
    <item>
      <title>Forma tradicional</title>
      <link>https://docker.rafaeldutra.me/beginner/installing/way2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docker.rafaeldutra.me/beginner/installing/way2/</guid>
      <description>Remova a versão antiga (caso tiver).
sudo apt-get remove docker docker-engine docker.io  Instale os pacotes que permitem que o apt possa utilizar repositórios com https
sudo apt-get install \ apt-transport-https \ ca-certificates \ curl \ software-properties-common  Agora instale a chave GPG do Docker
 Preste atenção na sua distribuição abaixo
 curl -fsSL https://download.docker.com/linux/$(lsb_release -is | tr &#39;[:upper:]&#39; &#39;[:lower:]&#39;)/gpg | sudo apt-key add -  Adicione o repositório.</description>
    </item>
    
    <item>
      <title>Rodando um container</title>
      <link>https://docker.rafaeldutra.me/beginner/commands/rodando-container/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docker.rafaeldutra.me/beginner/commands/rodando-container/</guid>
      <description>docker run alpine hostname  Você provavelmente teve uma resposta com letras e números, algo como: 7ed46aef747a.
O que acabamos de ver aqui é o nome do container no momento que você o executou.
Vamos explicar por partes o que o comando acima faz:
 docker run executa um container alpine é o nome da imagem que estamos Utilizando hostname é o comando que é executado dentro do container, por isso obtemos aquele conjunto de números e letras como resposta quando executamos o comando.</description>
    </item>
    
    <item>
      <title>Criando sua imagem sem Dockerfile</title>
      <link>https://docker.rafaeldutra.me/beginner/build/creating-without-dockerfile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docker.rafaeldutra.me/beginner/build/creating-without-dockerfile/</guid>
      <description>Sim, nós também podemos criar imagens sem precisar de Dockerfile. Vamos ver o seguinte:
docker run --interactive --tty ubuntu /bin/bash  Com este comando nós &amp;ldquo;entramos&amp;rdquo; no container. Dentro do container podemos fazer o que quisermos, como adicionar arquivos, remover arquivos, adicionar pacotes e etc.
Vamos então adicionar um pacote. No container, execute:
apt-get update &amp;amp;&amp;amp; apt-get install curl  </description>
    </item>
    
    <item>
      <title>Utilizando imagens</title>
      <link>https://docker.rafaeldutra.me/beginner/commands/utilizando-imagens/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docker.rafaeldutra.me/beginner/commands/utilizando-imagens/</guid>
      <description>Tudo que iremos executar em um container, vem de uma imagem e essa imagem pode ser uma que você mesmo criou ou uma imagem oficial, como foi o nosso caso acima como o Alpine.
 Apenas por conhecimento, Alpine é uma distribuição Linux super pequena que neste exato momento em sua versão 3.7.0 tem uma iso de 130MB e o mesmo vale para sua imagem para container, acredite, são 4.5MB de tamanho.</description>
    </item>
    
    <item>
      <title>Gerenciando os containers</title>
      <link>https://docker.rafaeldutra.me/beginner/commands/gerenciando-containers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docker.rafaeldutra.me/beginner/commands/gerenciando-containers/</guid>
      <description>Para podermos utilizar os comandos de stop e start, por exemplo, precisamos ter um container que de fato esta parado ou rodando, certo? então agora vamos rodar um container um pouco mais &amp;ldquo;complexo&amp;rdquo;.
 Atenção, localhost é para máquinas que estão com Docker rodando diretamente no &amp;ldquo;bare metal&amp;rdquo;, se estiver utilizando VM acesse o IP desta VM, algo como 192.168.25.100 - 10.100.111.222
 Abra um browser e acesse http://localhost:45000 e a página não foi localizada, certo?</description>
    </item>
    
    <item>
      <title>Interagindo com containers</title>
      <link>https://docker.rafaeldutra.me/beginner/interacting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docker.rafaeldutra.me/beginner/interacting/</guid>
      <description>Até agora fizemos alguns poucos exemplos, vamos entrar de fato em um container e trabalhar um pouco com ele.
Execute o seguinte comando:
docker run --interactive --tty --publish 45000:80 nginx /bin/bash   Edite o arquivo /usr/share/nginx/html/index.html com o vim  O que aconteceu?
apt-get update &amp;amp;&amp;amp; apt-get install vim --yes  Vamos acessar novamente o nosso web server na porta 45000 e percebemos que? Pois então, ao entrarmos dentro de um container, nós &amp;ldquo;perdemos&amp;rdquo; a execução de comando/entrypoint que a imagem foi destinada e para entedemos melhor, vamos ver como esta imagem do nginx foi criada.</description>
    </item>
    
    <item>
      <title>Manipulando containers</title>
      <link>https://docker.rafaeldutra.me/beginner/commands/manipulando-containers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docker.rafaeldutra.me/beginner/commands/manipulando-containers/</guid>
      <description>O comando que executamos incialmente docker run alpine hostname é o mais básico possível para termos um container em &amp;ldquo;funcionamento&amp;rdquo;. O &amp;ldquo;funcionamento&amp;rdquo; entre aspas é o que iremos discutir neste momento.
Antes tentamos remover a imagem alpine e obtivemos um erro, mas o que causou o erro? Foi devido que o container está rodando. Então como sabemos se um container está rodando? ou melhor, como sabemos o &amp;ldquo;status&amp;rdquo; de um container?</description>
    </item>
    
    <item>
      <title>Docker Compose</title>
      <link>https://docker.rafaeldutra.me/beginner/docker-compose/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docker.rafaeldutra.me/beginner/docker-compose/</guid>
      <description>Docker Compose é a maneira de declararmos vários containers para nossa aplicação e ele é &amp;ldquo;invocado&amp;rdquo; pelo comando docker-compose. Então com isso imaginamos que temos uma aplicação escrita em PHP que utiliza banco de dados MySQL para guardarmos nossos dados.
Exemplos:
 temos uma aplicação escrita em PHP temos um banco de dados em MySQL  ou ainda, o tão famoso Wordpress:
 temos o Wordpress temos o banco de dados do Wordpress  Não importa aqui o exemplo, o que importa é a ideia de termos &amp;ldquo;coisas separadas, vamos simplificar a ideia nisso apenas.</description>
    </item>
    
    <item>
      <title>Limpando o que não é usado</title>
      <link>https://docker.rafaeldutra.me/beginner/commands/limpando-o-que-nao-e-usado/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docker.rafaeldutra.me/beginner/commands/limpando-o-que-nao-e-usado/</guid>
      <description>Você irá notar que depois de muitos comandos para lá e para cá, muitas coisas ficaram para trás, como containers parados, imagens não &amp;ldquo;funcionais&amp;rdquo; e etc. Para limparmos essa bagunça, execute o comando abaixo:
docker system prune  Você irá receber algo do tipo:
rafael @ nazgul ~ └─ $ ▶ docker system prune WARNING! This will remove: - all stopped containers - all networks not used by at least one container - all dangling images - all build cache Are you sure you want to continue?</description>
    </item>
    
    <item>
      <title>Referências</title>
      <link>https://docker.rafaeldutra.me/beginner/reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docker.rafaeldutra.me/beginner/reference/</guid>
      <description> Docker site oficial Docker imagens e camadas  </description>
    </item>
    
    <item>
      <title>Docker Compose</title>
      <link>https://docker.rafaeldutra.me/files/wordpress/docker-compose.yml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docker.rafaeldutra.me/files/wordpress/docker-compose.yml/</guid>
      <description>version: &#39;3.3&#39; services: db: image: mysql:5.7 volumes: - db_data:/var/lib/mysql restart: always environment: MYSQL_ROOT_PASSWORD: somewordpress MYSQL_DATABASE: wordpress MYSQL_USER: wordpress MYSQL_PASSWORD: wordpress wordpress: depends_on: - db image: wordpress:latest ports: - &amp;quot;8000:80&amp;quot; restart: always environment: WORDPRESS_DB_HOST: db:3306 WORDPRESS_DB_USER: wordpress WORDPRESS_DB_PASSWORD: wordpress volumes: db_data:  </description>
    </item>
    
    <item>
      <title>Nginx Dockerfile</title>
      <link>https://docker.rafaeldutra.me/files/nginx/dockerfile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docker.rafaeldutra.me/files/nginx/dockerfile/</guid>
      <description>FROM nginx:latest LABEL description=&amp;quot;Docker imagem que será gerada no nosso exmeplo.&amp;quot; LABEL maintainer=&amp;quot;Rafael Dutra &amp;lt;raffaeldutra@gmail.com&amp;gt;&amp;quot; ENV FOSSDAY Lajeado ENV QUANDO 5/5 2018 RUN apt-get update &amp;amp;&amp;amp; \ apt-get install git --yes ADD index.html /usr/share/nginx/html/index.html EXPOSE 80 CMD [&amp;quot;nginx&amp;quot;, &amp;quot;-g&amp;quot;, &amp;quot;daemon off;&amp;quot;]  </description>
    </item>
    
    <item>
      <title>PHP CLI Dockerfile</title>
      <link>https://docker.rafaeldutra.me/files/php/dockerfile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docker.rafaeldutra.me/files/php/dockerfile/</guid>
      <description>FROM php:7.2.5-cli-alpine3.7 CMD [&amp;quot;php&amp;quot;, &amp;quot;--version&amp;quot;]  </description>
    </item>
    
  </channel>
</rss>