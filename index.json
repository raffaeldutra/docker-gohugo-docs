[
{
	"uri": "https://docker.rafaeldutra.me/beginner/docker/",
	"title": "Por que usar Docker ?",
	"tags": [],
	"description": "",
	"content": " Isolamento  O que estiver dentro do container, não irá afetar o restante de seu ambiente.\nUtilizando containers separados, cada componente de uma determinada aplicação faz com que você evite conflito de dependências.\n Reproducibilidade  Uma vez que você consiga rodar o seu container em Docker, você será capaz de executá-lo exatamente da mesma maneira em outro ambiente que tenha Docker, simples assim, ou seja, se você rodar sua aplicação em uma máquina X e logo depois ir para uma máquina Y, você irá rodar sem problemas sua aplicação, pois tudo está encapsulado em uma mesma unidade de \u0026ldquo;medida\u0026rdquo;, Docker.\n Gerenciamento de ambientes  Usando Docker é muito fácil você ter diferentes tipos de ambientes, como teste, desenvolvimento, qualidade e produção. Você pode versionais toda sua infraestrutura e ter todo o controle do que está entrando em seu ambiente.\n Integração contínua  Aqui está um grande ponto do uso Docker. Temos hoje uma vasta quantidade de ferramentas para usarmos como CI (Continuous Integratation), como Jenkins, Bamboo, Travis e etc. Cada vez que seu código fonte é atualizado, essas ferramentas salvam uma nova imagem e podem ir para produção.\n"
},
{
	"uri": "https://docker.rafaeldutra.me/beginner/",
	"title": "Docker Básico",
	"tags": [],
	"description": "",
	"content": "A ideia principal aqui é tentar ir sempre direto ao ponto e tentar ao máximo levantar as ideias que rodeiam Docker.\nUma documentação direto ao ponto.\n"
},
{
	"uri": "https://docker.rafaeldutra.me/beginner/installing/",
	"title": "Instalando",
	"tags": [],
	"description": "",
	"content": " Para instalar Docker CE (Community Edition), você precisa de versão 64 bits.\nAgora para instalarmos isso vai depender de bastante coisa, porém vamos trabalhar de maneira genérica, então segue duas formas:\nForma 1.\n Uma máquina virtual (VM): pode ser utilizando Virtualbox, VMware, tanto faz.  VM com acesso para internet. VM com placa em modo bridge.\n Curl instalado sudo apt-get install curl \u0026ndash;yes    Atenção: esta VM precisa ter uma interface em modo bridge para ter acesso aos containers que iremos estudar durante o workshop\n Forma 2.\n Se você já for usuário Linux nativo, pode realizar diretamente sem necessitar de máquina virtual.  Formas de instalar docker Existem algumas formas de instalar Docker, porém vamos ver as duas mais comuns.\n\nComo obter Docker para outros sistemas?  Link para documentação oficial  Instalando em Windows Instalando em Debian Instalando em Ubuntu Instalando em MacOS   "
},
{
	"uri": "https://docker.rafaeldutra.me/beginner/commands/",
	"title": "Rodando containers",
	"tags": [],
	"description": "",
	"content": "Verifique se está com docker corretamente funcionando, para isso execute o comando:\ndocker version  Sua saída deve ser algo parecido com:\nrafael @ nazgul ~ └─ $ ▶ docker version Client: Version:\t17.12.0-ce API version:\t1.35 Go version:\tgo1.9.2 Git commit:\tc97c6d6 Built:\tWed Dec 27 20:03:51 2017 OS/Arch:\tdarwin/amd64 Server: Engine: Version:\t17.12.0-ce API version:\t1.35 (minimum version 1.12) Go version:\tgo1.9.2 Git commit:\tc97c6d6 Built:\tWed Dec 27 20:12:29 2017 OS/Arch:\tlinux/amd64 Experimental:\ttrue  "
},
{
	"uri": "https://docker.rafaeldutra.me/beginner/installing/way1/",
	"title": "A maneira Linux simples de ser",
	"tags": [],
	"description": "",
	"content": " Dependendo da versão do seu Ubuntu, Debian e etc, pode Baixe Docker com o comando mágico (funciona somente em Sistemas Operacionais). Windows, sorry :-)\n curl -fsSL https://get.docker.com/ | sh sudo usermod -aG docker \u0026lt;usuario\u0026gt;  Depois disso, você precisa fazer logoff para funcionar com este usuário.\n"
},
{
	"uri": "https://docker.rafaeldutra.me/beginner/commands/commands/",
	"title": "Comandos",
	"tags": [],
	"description": "",
	"content": "Para verificar todos os comandos proporcionados por Docker, simplesmente digite:\ndocker  Importante: não esqueça que a linha de comando (CLI) é sua melhor amiga, caso não souber como um comando continua, ou seja, opções deste comando, simplesmente digite:\ndocker \u0026lt;comando\u0026gt; --help  "
},
{
	"uri": "https://docker.rafaeldutra.me/beginner/dockerfile/",
	"title": "Dockerfile",
	"tags": [],
	"description": "",
	"content": "Chegamos então ao arquivo principal de Docker, o tão conhecido Dockerfile. Dockerfile é um simples arquivo texto que contem todos os comandos para gerar uma imagem, apenas isso em sua forma mais resumida.\nSe você já conhece um pouco de CLI (Command Line Interface) de GNU/Linux, provavelmente não terá nenhum problema para utilizar Dockerfile, pois ele é basicamente comando que você já usa.\nAqui está a lista dos comandos que você pode utilizar dentro do seu arquivo. Vamos explicar rapidamente o que cada um faz.\n FROM - define a imagem base para você iniciar sua nova imagem. LABEL - aqui é possível definir algumas informações para melhor organização de suas imagens, você pode usar quantas labels quiser. ENV - variáveis de ambiente que serão utilizadas dentro do container quando você invocar a imagem. RUN - aqui irão entrar todos os comandos que deseja executar assim que iniciar a buildar sua imagem. WORKDIR - de onde serão executados os comandos, este comando é um path apenas. VOLUME - possibilita o acesso de um diretório na sua máquina real. USER - qual usuário irá executar os comandos dentro da imagem, o padrão é root. ADD or COPY - copia arquivos e diretórios de sua máquina local para dentro da imagem. EXPOSE - expõe uma porta para ser acessada publicamente, como a porta 80, por exemplo CMD - executa um comando assim que você invocar a imagem. ENTRYPOINT - parecido com o CMD, mas aqui normalmente você coloca um script para ser iniciado.  "
},
{
	"uri": "https://docker.rafaeldutra.me/beginner/dockerfile/dockerfile/",
	"title": "Dockerfile",
	"tags": [],
	"description": "",
	"content": "Aqui um exemplo utilizando como base a imagem Nginx que já estavámos utilizando anteriormente com o máximo de comandos que o Dockerfile suporta e que vimos acima.\nFROM nginx:latest LABEL description=\u0026quot;Docker imagem que será gerada no nosso exmeplo.\u0026quot; LABEL maintainer=\u0026quot;Rafael Dutra \u0026lt;raffaeldutra@gmail.com\u0026gt;\u0026quot; ENV FOSSDAY Lajeado ENV QUANDO 5/5 2018 RUN apt-get update \u0026amp;\u0026amp; \\ apt-get install git --yes ADD index.html /usr/share/nginx/html/index.html EXPOSE 80 CMD [\u0026quot;nginx\u0026quot;, \u0026quot;-g\u0026quot;, \u0026quot;daemon off;\u0026quot;]  "
},
{
	"uri": "https://docker.rafaeldutra.me/beginner/dockerfile/creating-image/",
	"title": "Criando nossa imagem utilizando o Dockerfile",
	"tags": [],
	"description": "",
	"content": "É realmente simples gerarmos uma imagem com o nosso arquivo, segue um exemplo de como isto pode ser feito.\ndocker build --tag fossday/nginx:0.1 .  Agora vamos executar o nosso container baseado na imagem que acabamos de gerar.\ndocker run --interactive --tty --publish 46000:80 fossday/nginx:0.1 /bin/bash  Vamos acessa a url e ver o que nos espera, http://localhost:46000\n O que aconteceu? Qual o motivo de alterarmos o arquivo index.html em nossa máquina e nada aconteceu na página?  "
},
{
	"uri": "https://docker.rafaeldutra.me/beginner/installing/way2/",
	"title": "Forma tradicional",
	"tags": [],
	"description": "",
	"content": "Remova a versão antiga (caso tiver).\nsudo apt-get remove docker docker-engine docker.io  Instale os pacotes que permitem que o apt possa utilizar repositórios com https\nsudo apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ software-properties-common  Agora instale a chave GPG do Docker\n Preste atenção na sua distribuição abaixo\n curl -fsSL https://download.docker.com/linux/$(lsb_release -is | tr '[:upper:]' '[:lower:]')/gpg | sudo apt-key add -  Adicione o repositório.\nsudo add-apt-repository \u0026quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu (lsb_release -cs) stable\u0026quot;  Vamos atualizar o index dos pacotes apt\nsudo apt-get update  Vamos instalar a última versão do Docker Community Edition\nsudo apt-get install docker-ce  Vamos testar se está tudo funcionando\nsudo docker run hello-world  "
},
{
	"uri": "https://docker.rafaeldutra.me/beginner/commands/rodando-container/",
	"title": "Rodando um container",
	"tags": [],
	"description": "",
	"content": "docker run alpine hostname  Você provavelmente teve uma resposta com letras e números, algo como: 7ed46aef747a.\nO que acabamos de ver aqui é o nome do container no momento que você o executou.\nVamos explicar por partes o que o comando acima faz:\n docker run executa um container alpine é o nome da imagem que estamos Utilizando hostname é o comando que é executado dentro do container, por isso obtemos aquele conjunto de números e letras como resposta quando executamos o comando.  O que iremos ver agora é:\n Executando o comando acima algumas vezes, o resultado mudou?  "
},
{
	"uri": "https://docker.rafaeldutra.me/beginner/build/",
	"title": "Criando sua imagem com Dockerfile",
	"tags": [],
	"description": "",
	"content": "Para criamos nossa imagem, precisamos de um arquivo Dockerfile conforme visto aqui. Com este arquivo podemos criar nossas próprias imagens de uma forma organizada e automatizada.\nPara criarmos ela, devemos executar o comando\ndocker build --tag nomeDaImagemQueDeseja:versao.1 .  Devemos atentar par duas coisas aqui:\n1 - O arquivo Dockerfile deve estar (mas podemos passar parâmetro, mas não vamos discutir isso agora) no mesmo diretório onde você está executando o comando.\n2 - Existe sim um . (ponto) final no comando, ele diz de uma maneira simplificada que nosso Dockerfile está neste diretório.\n"
},
{
	"uri": "https://docker.rafaeldutra.me/beginner/build/creating-without-dockerfile/",
	"title": "Criando sua imagem sem Dockerfile",
	"tags": [],
	"description": "",
	"content": "Sim, nós também podemos criar imagens sem precisar de Dockerfile. Vamos ver o seguinte:\ndocker run --interactive --tty ubuntu /bin/bash  Com este comando nós \u0026ldquo;entramos\u0026rdquo; no container. Dentro do container podemos fazer o que quisermos, como adicionar arquivos, remover arquivos, adicionar pacotes e etc.\nVamos então adicionar um pacote. No container, execute:\napt-get update \u0026amp;\u0026amp; apt-get install curl  "
},
{
	"uri": "https://docker.rafaeldutra.me/beginner/commands/utilizando-imagens/",
	"title": "Utilizando imagens",
	"tags": [],
	"description": "",
	"content": "Tudo que iremos executar em um container, vem de uma imagem e essa imagem pode ser uma que você mesmo criou ou uma imagem oficial, como foi o nosso caso acima como o Alpine.\n Apenas por conhecimento, Alpine é uma distribuição Linux super pequena que neste exato momento em sua versão 3.7.0 tem uma iso de 130MB e o mesmo vale para sua imagem para container, acredite, são 4.5MB de tamanho.\n Execute o comando:\ndocker images  E o resultado deve ser algo assim:\nrafael @ nazgul ~ └─ $ ▶ docker images REPOSITORY TAG IMAGE ID CREATED SIZE golang 1.10.0-alpine3.7 85256d3905e2 7 weeks ago 376MB maven 3.5.2-jdk-8 31eec910d005 7 weeks ago 748MB ubuntu 16.04 0458a4468cbc 2 months ago 112MB ubuntu latest 0458a4468cbc 2 months ago 112MB raffaeldutra/gohugo latest 7d6cac06f35c 2 months ago 1.11GB golang latest 3858fd70eed2 2 months ago 735MB python 2.7-alpine 0781c116c406 2 months ago 72.4MB python 3.6.4-alpine3.7 4b00a94b6f26 2 months ago 83.4MB alpine 3.4 c7fc7faf8c28 3 months ago 4.82MB alpine latest 3fd9065eaf02 3 months ago 4.15MB nginx latest 3f8a4339aadd 3 months ago 108MB jenkins latest 5fc84ab0b7ad 3 months ago 809MB jenkins 2.60.3-alpine 2ad007d33253 5 months ago 223MB maven 3.5.2-jdk-8-alpine 293423a981a7 5 months ago 116MB java openjdk-8-jdk-alpine 3fd9dd82815c 13 months ago 145MB java 8u102-jre 13f413e924a3 17 months ago 309MB  O que iremos ver agora é:\n Como procurar uma imagem?  docker search \u0026lt;imagem\u0026gt;   Como remover uma imagem?  docker rmi alpine   Aqui iremos obter um erro, pois temos aquele primeiro container \u0026ndash; docker run alpine hostname \u0026ndash; em funcionamento e não é possível remover uma imagem onde há containers rodando.\n  Como saber se a imagem que vou utilizar é uma imagem oficial?  docker search ubuntu   Como baixamos uma imagem?  docker pull ubuntu  e para baixarmos uma versão específica, como Ubuntu 18.04? Para isso passe após o : a versão que quer utilizar\ndocker pull ubuntu:18.04  "
},
{
	"uri": "https://docker.rafaeldutra.me/beginner/commands/gerenciando-containers/",
	"title": "Gerenciando os containers",
	"tags": [],
	"description": "",
	"content": "Para podermos utilizar os comandos de stop e start, por exemplo, precisamos ter um container que de fato esta parado ou rodando, certo? então agora vamos rodar um container um pouco mais \u0026ldquo;complexo\u0026rdquo;.\n Atenção, localhost é para máquinas que estão com Docker rodando diretamente no \u0026ldquo;bare metal\u0026rdquo;, se estiver utilizando VM acesse o IP desta VM, algo como 192.168.25.100 - 10.100.111.222\n Abra um browser e acesse http://localhost:45000 e a página não foi localizada, certo?\nExecute o seguinte comando:\ndocker run --detach --publish 45000:80 nginx  Agora abra novamente o endereço http://localhost:45000 - Magic!\nCerto, agora temos um servidor web funcionando com apenas um comando na porta 45000 e com isso em funcionamento podemos utilizar os comandos de stop e start.\nVamos parar o container:\ndocker container stop \u0026lt;id do container\u0026gt;  Acesse novamente o seu browser e tente acessar a porta 45000.\nVamos subir novamente o container com o comando:\ndocker container start \u0026lt;id do container\u0026gt;  "
},
{
	"uri": "https://docker.rafaeldutra.me/beginner/interacting/",
	"title": "Interagindo com containers",
	"tags": [],
	"description": "",
	"content": " Até agora fizemos alguns poucos exemplos, vamos entrar de fato em um container e trabalhar um pouco com ele.\nExecute o seguinte comando:\ndocker run --interactive --tty --publish 45000:80 nginx /bin/bash   Edite o arquivo /usr/share/nginx/html/index.html com o vim  O que aconteceu?\napt-get update \u0026amp;\u0026amp; apt-get install vim --yes  Vamos acessar novamente o nosso web server na porta 45000 e percebemos que? Pois então, ao entrarmos dentro de um container, nós \u0026ldquo;perdemos\u0026rdquo; a execução de comando/entrypoint que a imagem foi destinada e para entedemos melhor, vamos ver como esta imagem do nginx foi criada. Para isso nós iremos acessar um repositório desta imagem no Github.\nDocker Hub é um repositório aberto de imagens de onde todas imagens públicas, inclusive esta que estamos usando neste momento, estão sendo utilizadas. Você pode criar sua propria imagem e envia-lá sem problema algum para o Docker Hub, apenas atente para não deixar nenhum tipo de credential \u0026ldquo;boiando\u0026rdquo; por lá.\nVamos então abrir o repositório do Nginx e ver de mais perto o que estamos conversando.\nAo abrirmos o arquivo de como é feita a imagem, percebemos na última que existe um comando chamado CMD [\u0026ldquo;nginx\u0026rdquo;, \u0026ldquo;-g\u0026rdquo;, \u0026ldquo;daemon off;\u0026rdquo;]. Este comando nos diz o seguinte em uma tradução livre \u0026ldquo;quando você rodar um novo container eu automaticamente vou invocar o comando nginx -g daemon para você\u0026rdquo;. No nosso caso, acessamos o container de modo que estamos \u0026ldquo;brincando\u0026rdquo; com ele e este comando não foi executado pois ele somente é dispararado quando não passamos um novo parâmetro para ele, que foi o /bin/bash.\nDockerfile é este arquivo que estamos acessando neste momento e entendendo sua \u0026ldquo;planta baixa\u0026rdquo; de como funciona sua imagem e que também entraremos para falar somente dele.\nVoltamos ao nosso problema inicial. Percebemos que ao entrar no container que está rodando Nginx ele não subiu o serviço e com isso nos vem a pergunta simples, como levantamos o serviço do nginx? simples, digite o comando nginx e acesse novamente o endereço http://localhost:45000\n Trabalhar com containers no início pode ser tão trabalhoso como de fato é :-)\n Agora acesse novamente http://localhost:45000 e veja sua nova página.\nPorém nós podemos fazer algo melhor sem \u0026ldquo;encostar\u0026rdquo; no container, algo interessante como volumes que veremos mais em breve.\nOutros comandos para interagir com seu container Quando iniciamos um container novo, podemos instalar pacotes, editar/apagar/criar arquivos e outras coisas mais, porém temos um problema ao sair do container de forma tradicional pelo terminal pois o container automaticamente será parado assim que você digitar exit ou der control d. Para resolvermos este problema, podemos utiliazar a combinação de teclas como control p q, isso fará com que nosso container continue rodando normalmente e ele não irá parar.\nUtilizando este conjunto de teclas, nos vem a seguinte pergunta: \u0026ldquo;E se eu quero retornar ao container, como faço?\u0026rdquo;.\ndocker attach \u0026lt;id do container\u0026gt; ou \u0026lt;nome\u0026gt;  Excelente, tudo funcionando como esperado, mas e se eu quero apenas listar algum arquivo ou quem sabe visualizar e assim por diante? ou seja, quero apenas fazer algo breve no meu container?\ndocker exec \u0026lt;id do container\u0026gt; ou \u0026lt;nome\u0026gt; ls -la /usr/share/nginx/html   Como faço para visualizar o log de um container?  docker logs \u0026lt;id do container\u0026gt; ou \u0026lt;nome\u0026gt;   Como faço para visualizar status do meu container?  docker stats \u0026lt;id do container\u0026gt; ou \u0026lt;nome\u0026gt;   Como faço para visualizar informações detalhadas de um container?  docker inspect \u0026lt;id do container\u0026gt; ou \u0026lt;nome\u0026gt;  "
},
{
	"uri": "https://docker.rafaeldutra.me/beginner/commands/manipulando-containers/",
	"title": "Manipulando containers",
	"tags": [],
	"description": "",
	"content": "O comando que executamos incialmente docker run alpine hostname é o mais básico possível para termos um container em \u0026ldquo;funcionamento\u0026rdquo;. O \u0026ldquo;funcionamento\u0026rdquo; entre aspas é o que iremos discutir neste momento.\nAntes tentamos remover a imagem alpine e obtivemos um erro, mas o que causou o erro? Foi devido que o container está rodando. Então como sabemos se um container está rodando? ou melhor, como sabemos o \u0026ldquo;status\u0026rdquo; de um container?\nUtilize o comando:\ndocker container \u0026lt;comando\u0026gt;   Queremos listar containers?  docker container ls   Queremos parar?  docker container stop \u0026lt;nome do container\u0026gt; ou \u0026lt;id do container\u0026gt;   Queremos iniciar?  docker container start \u0026lt;nome do container\u0026gt; ou \u0026lt;id do container\u0026gt;  Para a lista de comandos que podemos utilizar, simplesmente execute:\ndocker container  "
},
{
	"uri": "https://docker.rafaeldutra.me/beginner/volumes/",
	"title": "Volumes",
	"tags": [],
	"description": "",
	"content": " \nStorage drivers Antes de iniciarmos com volumes, é realmente importante entedermos um pouco como funcionam as imagens, pois como foi dito em algum momento, um container só existe se houver uma imagem (em uma forma resumida).\nStorage driver permitem que você crie dados em uma camada de escrita/gravação do seu container. O importante aqui neste momento é: quando contianer parar, nenhum dado será persistifo \u0026ndash; leia-se gravado em disco.\n\nImagens e camadas (layers) Uma imagem Docker é criada em várias camadas e cada camada representa uma instrução do seu Dockerfile.\nVejamos o Dockerfile de exemplo abaixo:\nFROM alpine:3.7 ADD /etc/motd /root/meu-motd RUN mkdir -p /root/arquivos/leiame CMD cat /root/meu-motd  Cada uma dessas linhas acima representam uma camada (layer). O importante aqui é entender que cada um desses comandos gera uma camada de diferença em relação a outra, ou seja, quando o comando FROM foi executado, ele gerou uma camada (layer) X. O comando ADD gerou uma outra camada com seus arquivos gerando uma camada Y e assim respectivamente para os outros comandos.\nEssas camandas (layers) são empilhadas uma em cima ds outras e quando você inicia um novo container você simplesmente adiciona uma nova layer de gravação em cima de todas as outras que já existiam. Se por algum motivo você entrar neste container e modificar qualquer arquivo lá dentro, como provavelmente já fizemos em algum exercício anterior, todas as modificações ficam nesta nova camada que você criou ao executar seu container.\nVejamos esta imagem abaixo:\n Imagem retirada da documentação oficial: https://docs.docker.com/storage/storagedriver/images/container-layers.jpg\n \nContainers e camadas (layers) A principal e maior diferença entre um container e uma imagem é aquela camada de escrita que acabamos de mencionar acima (camada mais alta do diagrama), aquela onde você pode modificar qualquer coisa dentro de um container que é onde essas modificações serão gravadas.\nQuando seu container for deletado essa camada de cima também é removida porém as camadas de baixo irão permanecer \u0026ndash; por isso muito cuidado com os bancos de dados que irá levantar, ou ainda os dados que você não pode perder, pois usando o padrão de um container, você irá perder tudo \u0026ndash; e aqui também reside uma beleza super interessante: você usar o reaproveitamento das camadas de baixo, veja a imagem abaixo:\n\u0026gt; Imagem retirada da documentação oficial: https://docs.docker.com/storage/storagedriver/images/sharing-layers.jpg\n\nUsando Volumes Chegou a hora de brincar um pouco com volumes. Temos dois \u0026ldquo;modelos\u0026rdquo; de como utilizar containers aqui:\n Mapeando diretório do nosso host Aqui podemos escolher o que queremos do nosso host e mapearmo este diretório lá pra dentro do container. Exemplo:  docker run --rm --volume /tmp:/root/tmp alpine /bin/sh -c 'echo Eu sou o container de nome $(hostname) \u0026gt; /root/tmp/meu-querido-container'   Mapeando dados de um container  "
},
{
	"uri": "https://docker.rafaeldutra.me/beginner/docker-compose/",
	"title": "Docker Compose",
	"tags": [],
	"description": "",
	"content": "Docker Compose é a maneira de declararmos vários containers para nossa aplicação e ele é \u0026ldquo;invocado\u0026rdquo; pelo comando docker-compose. Então com isso imaginamos que temos uma aplicação escrita em PHP que utiliza banco de dados MySQL para guardarmos nossos dados.\nExemplos:\n temos uma aplicação escrita em PHP temos um banco de dados em MySQL  ou ainda, o tão famoso Wordpress:\n temos o Wordpress temos o banco de dados do Wordpress  Não importa aqui o exemplo, o que importa é a ideia de termos \u0026ldquo;coisas separadas, vamos simplificar a ideia nisso apenas.\nDocker Compose é parecido com o Dockerfile que vimos antes, mas ele é escrito em um formato YAML (YAML Ain\u0026rsquo;t Markup Language) para que possamos declarar nossa aplicação e tudo mais que é utiliza por ela, como volumes, portas, dependência de um outro container, imagem, variáveis de ambiente e etc, ou sejam nada quase diferente do que o Dockerfile neste ponto, porém apenas parece, ele faz muito mais coisa.\nVejamos um exemplo de Docker Compose para termos uma ideia.\n1. version: '3.3' 2. 3. services: 4. db: 5. image: mysql:5.7 6. volumes: 7. - db_data:/var/lib/mysql 8. restart: always 9. environment: 10. MYSQL_ROOT_PASSWORD: somewordpress 11. MYSQL_DATABASE: wordpress 12. MYSQL_USER: wordpress 13. MYSQL_PASSWORD: wordpress 14. 15. wordpress: 16. depends_on: 17. - db 18. image: wordpress:latest 19. ports: 20. - \u0026quot;8000:80\u0026quot; 21. restart: always 22. environment: 23. WORDPRESS_DB_HOST: db:3306 24. WORDPRESS_DB_USER: wordpress 25. WORDPRESS_DB_PASSWORD: wordpress 26. volumes: 27. db_data:  Isso mesmo, linha por linha eu vou explicar:\nLinha 1: versão utilizada do Docker Compose, e isso vai variar conforme a versão que você tem instalada na sua máquina.\nLinha 3: estamos dizendo que estamos iniciando um serviço e tudo abaixo dessa linha faz parte deste serviço.\nLinha 4: nome que estamos dando para este container, no nosso caso é um simples \u0026ldquo;db\u0026rdquo;, mas poderia ser chamado de banco, database e etc.\nLinha 5: imagem utilizada do mysql com sua respectiva versão.\nLinha 6 e 7: volume que é utilizado para nosso banco de dados, veja que este valor está ligado diretamente com a definição das linhas 26 e 27.\nLinha 8: se algo acontecer com o container, ele por default irá reiniciar sempre.\nLinha 9 até linha 13: são variáveis de ambiente que serão utilizadas para acessar o container que roda nosso banco de doados\nLinha 15: nome do nosso container, que mais uma vez poderia ser o nome de qualquer coisa.\nLinha 16: dizemos que para levantar este container, precisamos do container chamado db antes em funcionamento.\nLinha 18: imagem utilizada do Wordpress com sua respectiva versão, no caso latest significa última.\nLinha 19 e 20: definição de portas, ou seja, queremos acessar na porta 8000 da nossa máquina a porta 80 que roda lá dentro do container.\nLinha 21: se algo acontecer com o container, ele por default irá reiniciar sempre.\nLinha 22 até 25:ão variáveis de ambiente que serão utilizadas para acessar o container que roda nosso Wordpress.\nLinha 26 e 27: definição do volume que usamos nas linhas 6 e 7.\n"
},
{
	"uri": "https://docker.rafaeldutra.me/beginner/commands/limpando-o-que-nao-e-usado/",
	"title": "Limpando o que não é usado",
	"tags": [],
	"description": "",
	"content": "Você irá notar que depois de muitos comandos para lá e para cá, muitas coisas ficaram para trás, como containers parados, imagens não \u0026ldquo;funcionais\u0026rdquo; e etc. Para limparmos essa bagunça, execute o comando abaixo:\ndocker system prune  Você irá receber algo do tipo:\nrafael @ nazgul ~ └─ $ ▶ docker system prune WARNING! This will remove: - all stopped containers - all networks not used by at least one container - all dangling images - all build cache Are you sure you want to continue? [y/N] y Deleted Containers: 7ed46aef747a7726285ecde46f7fbcd37fb932e1d106a5552a5ec6205cb45f2f 847d0f4d36f2b295804778ea69d33e3f9e4fbaf968fec9c244126955aba50e9b a47ad7b67d69698896b290f6daf7e4f65760a38a15a2ba10ed87e3d33ecc1032 dfcbe65a5ae70c204abec0f8a224d1373804c64a927ada38f09d773aca29020d 62126d53d79232d6bd687a68990e5ef05b5e9e3f8e678286994e2370e9c6faed b9427ac05e95b6a7256dec9d53578ed1d05c6792333917e69be5f71e074a5a50 076a96cd455ad7d7a97d2756b8bd1768aa474fccb7c73022fc94aa013ff0a274 afdf2d8219b5917ba9e110657e0364d7c9f407e1871631669912b626bf6033a8 498da065d6e5f19e27828336a9c0a72dcce284de7ccf21e469266fb8a67a7e3d a5dadf4de7549d7923aa9a00b5851813efd8ac7f1dd2410397865bc64955af57 365ae9546d039aba3e8df2abc5132310e2ec67f54bc20e0ac6c2e5b35e55052a 5c0e6625bda621820dc18479231a7018d7c11dd6fa933c0c4842e575041a34a0 f0e9646730cd1bd8360e2fa2a71c8bfb3910968047acffe01f772c88f75b940e Deleted Images: deleted: sha256:2d92e5d5adbe5e207b36d93bd14d8b75919d4a118c86f4b137a9c46481b98fef deleted: sha256:8ae3118b00c274114fd91dc96628b845e0ff4722717bfdf343c2207bad1ec01f Total reclaimed space: 70.62MB  "
},
{
	"uri": "https://docker.rafaeldutra.me/beginner/reference/",
	"title": "Referências",
	"tags": [],
	"description": "",
	"content": " Docker site oficial Docker imagens e camadas  "
},
{
	"uri": "https://docker.rafaeldutra.me/whoami/",
	"title": "Quem sou eu?",
	"tags": [],
	"description": "",
	"content": "Olá pessoal me chamo Rafael Dutra.\nComo não estou imune a nada, provavelmente você irá encontrar algum erro de português ou pior ainda, de código, pois português se algo ainda estiver errado o português \u0026ldquo;funciona\u0026rdquo;, código não.\nDeixo abaixo uma lista de onde você pode entrar em contato comigo.\n E-mail: raffaeldutra@gmail.com\n Site: http://rafaeldutra.me\n Twitter: https://twitter.com/raffaeldutra\n Slideshare: https://www.slideshare.net/raffaeldutra\n Google Plus: https://plus.google.com/+RafaelDutra\n Github: https://github.com/raffaeldutra Linkedin: https://linkedin.com/in/rafaeldutra Youtube: Youtube  "
},
{
	"uri": "https://docker.rafaeldutra.me/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " Para quem é esta documentação Docker revolucionou pela simplicidade de como Software é desenvolvido, testado e adicionado em produção de forma rápida e simples.\nO público alvo do nosso workshop são aquelas pessoas que já ouviram falar na tecnologia e até quem sabe já se arriscaram no mundo de containers, mas ainda estão com dúvidas de como utilizar e de que forma ela pode se encaixar no seu dia-a-dia.\nVamos no decorrer da documentação instalar Docker, rodar comandos simples, entender o que eles representam, trabalhar com Dockerfile e evoluirmos até lançarmos alguns containers de uma única vez utilizando Docker Compose.\nSumário  Por que usar Docker? Afinal, o que é? Instalando  Maneira 1 Maneira 2  O básico Interagindo com containers Dockerfile Construindo sua imagem Trabalhando com volumes  Imagens e camadas Containers e camadas Usando Volumes  Docker Compose  "
},
{
	"uri": "https://docker.rafaeldutra.me/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docker.rafaeldutra.me/files/wordpress/docker-compose.yml/",
	"title": "Docker Compose",
	"tags": [],
	"description": "",
	"content": "version: '3.3' services: db: image: mysql:5.7 volumes: - db_data:/var/lib/mysql restart: always environment: MYSQL_ROOT_PASSWORD: somewordpress MYSQL_DATABASE: wordpress MYSQL_USER: wordpress MYSQL_PASSWORD: wordpress wordpress: depends_on: - db image: wordpress:latest ports: - \u0026quot;8000:80\u0026quot; restart: always environment: WORDPRESS_DB_HOST: db:3306 WORDPRESS_DB_USER: wordpress WORDPRESS_DB_PASSWORD: wordpress volumes: db_data:  "
},
{
	"uri": "https://docker.rafaeldutra.me/files/",
	"title": "Files",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docker.rafaeldutra.me/files/nginx/dockerfile/",
	"title": "Nginx Dockerfile",
	"tags": [],
	"description": "",
	"content": "FROM nginx:latest LABEL description=\u0026quot;Docker imagem que será gerada no nosso exmeplo.\u0026quot; LABEL maintainer=\u0026quot;Rafael Dutra \u0026lt;raffaeldutra@gmail.com\u0026gt;\u0026quot; ENV FOSSDAY Lajeado ENV QUANDO 5/5 2018 RUN apt-get update \u0026amp;\u0026amp; \\ apt-get install git --yes ADD index.html /usr/share/nginx/html/index.html EXPOSE 80 CMD [\u0026quot;nginx\u0026quot;, \u0026quot;-g\u0026quot;, \u0026quot;daemon off;\u0026quot;]  "
},
{
	"uri": "https://docker.rafaeldutra.me/files/php/dockerfile/",
	"title": "PHP CLI Dockerfile",
	"tags": [],
	"description": "",
	"content": "FROM php:7.2.5-cli-alpine3.7 CMD [\u0026quot;php\u0026quot;, \u0026quot;--version\u0026quot;]  "
},
{
	"uri": "https://docker.rafaeldutra.me/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]